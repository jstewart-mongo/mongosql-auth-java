apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'com.bmuschko.nexus'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

group = 'org.mongodb'
archivesBaseName = 'mongosql-auth'
version = '1.2.0-SNAPSHOT'

dependencies {
    compile 'mysql:mysql-connector-java:5.1.41'
    testCompile 'junit:junit:4.12'
}

sourceSets {
    test {
        java.srcDirs = ['src/test/unit/java', 'src/test/functional/java']
    }
}

tasks.withType(Test) {

    def getProjectPropertyOrDefault = { String propertyName, String defaultValue ->
        project.hasProperty(propertyName) ? project.property(propertyName) : defaultValue
    }

    def getProjectPropertyOrNull = { String propertyName ->
        project.hasProperty(propertyName) ? project.property(propertyName) : null
    }

    systemProperties(
            'org.mongodb.test.host': getProjectPropertyOrDefault('org.mongodb.test.host', '127.0.0.1'),
            'org.mongodb.test.port': getProjectPropertyOrDefault('org.mongodb.test.port', '3307'),
            'org.mongodb.test.ssl': getProjectPropertyOrDefault('org.mongodb.test.ssl', 'false'),
            'org.mongodb.test.database': getProjectPropertyOrDefault('org.mongodb.test.database', 'use_test'),
            'org.mongodb.test.sql': getProjectPropertyOrDefault('org.mongodb.test.sql', 'select a from foo'),

            'org.mongodb.test.user': getProjectPropertyOrNull('org.mongodb.test.user'),
            'org.mongodb.test.password': getProjectPropertyOrNull('org.mongodb.test.password'),

            'javax.net.ssl.trustStore': getProjectPropertyOrDefault('javax.net.ssl.trustStore', "${System.getProperty('user.home')}/.keystore"),
            'javax.net.ssl.keyStore': getProjectPropertyOrDefault('javax.net.ssl.keyStore', "${System.getProperty('user.home')}/.keystore"),
            'javax.net.ssl.keyStorePassword': getProjectPropertyOrDefault('javax.net.ssl.keyStorePassword', 'changeit'),
            'javax.net.ssl.trustStorePassword': getProjectPropertyOrDefault('javax.net.ssl.trustStorePassword', 'changeit'),

            'sun.security.krb5.debug': getProjectPropertyOrDefault('sun.security.krb5.debug', 'false'),
            'javax.security.auth.useSubjectCredsOnly': 'false',
            'java.security.krb5.kdc': getProjectPropertyOrNull('krb5.kdc'),
            'java.security.krb5.realm': getProjectPropertyOrNull('krb5.realm'),
            'java.security.auth.login.config': getProjectPropertyOrNull('auth.login.config')
    )
}

findbugs {
    sourceSets = [sourceSets.main]
}

/*
    For security we allow the signing-related project properties to be passed in as environment variables, which
    Gradle enables if they are prefixed with "ORG_GRADLE_PROJECT_".  But since environment variables can not contain
    the '.' character and the signing-related properties contain '.', here we map signing-related project properties with '_'
    to ones with '.' that are expected by the signing plugin.
 */
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        if (project.hasProperty("signing_keyId")) {
            allprojects { ext."signing.keyId" = project.property("signing_keyId") }
        }
        if (project.hasProperty("signing_secretKeyRingFile")) {
            allprojects { ext."signing.secretKeyRingFile" = project.property("signing_secretKeyRingFile") }
        }
        if (project.hasProperty("signing_password")) {
            allprojects { ext."signing.password" = project.property("signing_password") }
        }
    }
}

checkstyle {
    configProperties.checkstyleConfigDir = new File(rootDir, 'config/checkstyle')
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled true
        html.enabled true
    }
}

//////////////////////////////////////////
// Root project configuration           //
//////////////////////////////////////////
wrapper {
    gradleVersion = '4.10.1'
}

modifyPom {
    project {

        name 'MongoSQL Authentication Plugin'
        description 'MongoSQL Authentication Plugin for MySQL Connector/J'
        url 'https://github.com/mongodb/mongosql-java-auth'

        scm {
            url 'https://github.com/mongodb/mongosql-java-auth'
            connection 'scm:https://github.com/mongodb/mongosql-java-auth.git'
            developerConnection 'scm:git@github.com:mongodb/mongosql-java-auth.git'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }

        developers {
            developer {
                organization = 'MongoDB, Inc.'
            }
        }
    }
}

modifyPom { pom ->
    pom.dependencies.findAll {dep -> dep.groupId == 'mysql' }.each { it.scope = "provided" }
    // no need to publish test dependencies
    pom.dependencies.removeAll { it.scope == "test" }
}

task uploadSnapshotArchives(dependsOn: uploadArchives) {
    if (!version.endsWith("-SNAPSHOT")) {
        enabled = false
        dependsOn = []
    }
}
